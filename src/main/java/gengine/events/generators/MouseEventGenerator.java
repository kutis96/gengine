package gengine.events.generators;

import gengine.events.receivers.MouseEventReceiver;
import gengine.world.World;
import gengine.world.entity.WorldEntity;
import java.awt.event.*;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 * MouseEventGenerator. Listens to KeyEvents generated by the game's JPanel, and
 * dispatches them throughout the world.
 *
 * @author Richard Kutina <kutinric@fel.cvut.cz>
 */
public class MouseEventGenerator extends AbstWindowEventGenerator {

    private static final Logger LOG = Logger.getLogger(MouseEventGenerator.class.getName());

    //TODO: possibly rewrite this thing to use some silly FIFO buffers to store the KeyEvents
    //      and then dispatch them one by one inside the work method
    //
    private final World world;
    private final JFrame jf;

    private final MouseListener ml = new MouseListener() {
        @Override
        public void mouseClicked(MouseEvent e) {
            dispatchMouseEvent(e);
        }

        @Override
        public void mousePressed(MouseEvent e) {
            dispatchMouseEvent(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            dispatchMouseEvent(e);
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            dispatchMouseEvent(e);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            dispatchMouseEvent(e);
        }
    };

    public MouseEventGenerator(World world, JFrame jframe, int period) {
        super(world, jframe, period);
        this.world = world;
        this.jf = jframe;
    }

    @Override
    public void init() {
        //add a new KeyListener to the JFrame

        //TODO: check whether it's already attached
        //      might just as well set up a flag here for that... :/
        this.jf.addMouseListener(ml);
    }

    @Override
    public void work(long dt) {
        //periodically check the world entities hash
        //if it doesn't match, rebuild the event generator list?
        //somewhat pointless.
    }

    @Override
    public void die() {
        //detach MouseListener from the JFrame
        this.jf.removeMouseListener(ml);
    }

    private void dispatchMouseEvent(MouseEvent e) {
        //TODO: clean this up a bunch, so I don't need to bother with this massive case

        synchronized (this.world) {
            WorldEntity[] worldEntities = this.world.getEntities();

            for (WorldEntity we : worldEntities) {
                if (we instanceof MouseEventReceiver) {
                    MouseEventReceiver receiver = (MouseEventReceiver) we;

                    switch (e.getID()) {
                        case MouseEvent.MOUSE_CLICKED: {
                            receiver.mouseClicked(e);
                            break;
                        }
                        case MouseEvent.MOUSE_ENTERED: {
                            receiver.mouseEntered(e);
                            break;
                        }
                        case MouseEvent.MOUSE_EXITED: {
                            receiver.mouseExited(e);
                            break;
                        }
                        case MouseEvent.MOUSE_PRESSED: {
                            receiver.mousePressed(e);
                            break;
                        }
                        case MouseEvent.MOUSE_RELEASED: {
                            receiver.mouseReleased(e);
                            break;
                        }
                        case MouseEvent.MOUSE_DRAGGED: {
                            receiver.mouseDragged(e);
                            break;
                        }
                        default: {
                            LOG.severe("Unexpected MouseEvent ID! This is somewhat fishy.");
                        }
                    }
                }
            }
        }

    }

}
